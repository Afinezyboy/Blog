<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codings on Yu Zhang</title>
    <link>https://afinezyboy.github.io/Blog/coding/</link>
    <description>Recent content in Codings on Yu Zhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2022 23:33:40 +0800</lastBuildDate><atom:link href="https://afinezyboy.github.io/Blog/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Workflow for Python Learners</title>
      <link>https://afinezyboy.github.io/Blog/coding/learnpython/</link>
      <pubDate>Wed, 09 Mar 2022 23:33:40 +0800</pubDate>
      
      <guid>https://afinezyboy.github.io/Blog/coding/learnpython/</guid>
      <description>答应好的教你学Python，不能光买几本书就不管了。作为一个非科班程序员，在学习编程的过程中有很多一些心路历程，也踩过很多很多的坑。在你学习Python的过程中，我也同时出一套文档。这套文档甚至都不能称之为“教程”，因为技术含量实在太少，相关技术内容还是参考网站和书籍吧。这套文章主要为你提供一个“学习框架”，这些内容可能偏经验，许多都是我在学习过程中遇到的一些实际问题，希望能对你有一些帮助。
本文的主要内容包括（更新中）：
 如何理解编程？从战略上藐视它！ 如何安装Python？老司机告诉你。 Python该怎么学？给你画个框架。 有用的网站资源 &amp;hellip;&amp;hellip;.  战前动员 在高中的时候，我的好朋友东杰送我了一本清华大学谭浩强的《C程序设计》，也正是在那一刻，我开启了对编程浓浓的兴趣。也是在高中，我第一次接触到了吉他和单反相机。东杰后来去了南京创业，做的就是程序开发方面的工作；而我进入了天津大学电气工程专业，却也与编程结下了不解之缘。
我们专业对编程的要求很高，因为许多计算方法都非人力能够完成，必须借助计算机才能实现，例如最著名的潮流方程，涉及到迭代和矩阵求逆，非常复杂。记得当时我用的是MATLAB（m语言）编写潮流计算程序，这种语言是一种相当高级的语言，代码量一般不会很大，但即使这样，我的潮流计算也多达几百行代码，这样才能实现从数据读取、预处理、潮流计算、输出的全部功能。最后，这段程序非常神奇地，把一个庞大且复杂的计算，只花了0.2秒就从读取数据运行到了输出。
实际上，我们课程教的是C++，这是一种比C语言更高级一些的“面向对象”语言（关于面向对象，有机会再做解释），考前为了检验自己的复习成果，用C++写了一个dos版的贪吃蛇，最后考试也得了97分；后来学习微机原理，我又掌握了8086汇编语言，这是一种比C语言还要底层的语言，它可以直接对寄存器和内存进行操作，在课程设计部分，我用汇编语言写了一个扫码枪的程序，能够通过读取扫码枪的条码在LCD屏幕上显示商品信息；大四的时候，为了做大创项目，又学习了Java，基于一个开源的交通流软件Matsim，编写了支持电动汽车特性的包，并翻译了英文著作发表中文帖子，后来被上海的一家交通创业公司联系合作。算下来，在大学期间陆陆续续至少掌握了5种编程语言：C、C++、汇编、Java、m(MATLAB)。
那么，为什么我又学习Python了呢？其实主要还是一种偶然。记得那是2017年，Python还没有现在这么火，当时的我对编程有着一种近乎入迷的向往，并且对C++的复杂配置、闭源环境深恶痛疾，于是下决心寻找一门简单、优雅的编程语言，作为我以后主要编程的工具。其实当时可选的编程语言有很多，Python只是其中一种，据我所知，Java在大项目中的受欢迎程度远超过Python，C#也非常不错，另外还有Ruby、Go等等各种优秀的编程语言。而使得Python一下子戳中我，令我迫不及待想要了解它的原因，就在于下面这首《Python之禅》。只要在Python的命令行环境中输入import this，就会输出以下这段话：
 The Zen of Python, by Tim Peters
Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren&amp;rsquo;t special enough to break the rules. Although practicality beats purity. Errors should never pass silently.</description>
    </item>
    
  </channel>
</rss>
